import torchvision.transforms as transforms
import random
import torch

class Resize2FixedSize:
    def __init__(self, size):
        self.size = size

    def __call__(self, img):
        img = transforms.functional.resize(img, self.size)
        return img

class RandomResize:
    def __init__(self, scale):
        self.scale = scale

    def __call__(self, img):
        img_size = img.size
        r_scale = (self.scale[1] - self.scale[0]) * random.random() + self.scale[0]
        img = transforms.functional.resize(
            img, (int(img_size[0] * r_scale), int(img_size[1] * r_scale))
        )
        return img

def create_carla_rgb_transform(
    input_size,
    crop_size=None,
    is_training=False,
    use_prefetcher=False,
    scale=None,
    color_jitter=0.0,
    auto_augment=None,
    need_scale=True,
    interpolation="bilinear",
    mean=[0.485, 0.456, 0.406],
    std=[0.229, 0.224, 0.225],
):
    tfl = []

    if isinstance(input_size, (tuple, list)):
        img_size = input_size[-2:]
    else:
        img_size = input_size

    if isinstance(input_size, (tuple, list)):
        input_size_num = input_size[-1]
    else:
        input_size_num = input_size

    if need_scale:
        if input_size_num == 112:
            tfl.append(Resize2FixedSize((170, 128)))
        elif input_size_num == 128:
            tfl.append(Resize2FixedSize((195, 146)))
        elif input_size_num == 224:
            tfl.append(Resize2FixedSize((341, 256)))
        elif input_size_num == 256:
            tfl.append(Resize2FixedSize((340, 288)))
        else:
            tfl.append(
                Resize2FixedSize(
                    (int((input_size_num + 32) / 3.0 * 4.0), input_size_num + 32)
                )
            )

    if is_training:
        if scale:
            tfl.append(RandomResize(scale))
        if color_jitter > 0:
            tfl.append(
                transforms.ColorJitter(
                    brightness=color_jitter,
                    contrast=color_jitter,
                    saturation=color_jitter,
                    hue=color_jitter,
                )
            )
            
    tfl.append(transforms.CenterCrop(img_size))
    tfl.append(transforms.ToTensor())
    tfl.append(transforms.Normalize(mean=mean, std=std))

    return transforms.Compose(tfl)
